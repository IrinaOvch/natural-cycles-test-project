{"version":3,"sources":["hooks/useQueryString.tsx","query-string.tsx","hooks/useFitText.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useQueryString","key","initialValue","useState","queryString","window","location","search","values","parse","value","isNaN","Number","getQueryStrValue","setValue","newValue","newQueryStrValue","stringify","protocol","host","pathname","newUrl","history","pushState","path","setQueryString","useFitText","inputValue","rangeInputValue","initialFontSize","divRef","useRef","spanRef","fontSize","setFontSize","useEffect","spanElWidth","current","offsetWidth","divElWidth","fontSizeNumber","style","split","applyFontSize","divElHeight","offsetHeight","approximateFontSize","Math","floor","App","setInputValue","setRangeInputValue","className","type","onChange","event","target","min","max","newRangeValue","valueAsNumber","ref","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09c932b1.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { setQueryString, getQueryStrValue } from '../query-string'\n\nfunction useQueryString(key: string, initialValue: any) {\n  const [value, setValue] = useState(getQueryStrValue(key) || initialValue)\n\n  const onSetValue = (newValue: number | string) => {\n    setValue(newValue)\n    setQueryString(key, newValue)\n  }\n  return [value, onSetValue]\n}\n\nexport default useQueryString\n","import { parse, stringify } from 'query-string'\n\nexport const setQueryString = (\n  key: string,\n  value: number | string | string[],\n  queryString = window.location.search,\n) => {\n  const values = parse(queryString)\n  const newQueryStrValue = stringify({ ...values, [key]: value })\n\n  const { protocol, host, pathname } = window.location\n\n  const newUrl = protocol + '//' + host + pathname + '?' + newQueryStrValue\n  window.history.pushState({ path: newUrl }, '', newUrl)\n}\n\nexport const getQueryStrValue = (\n  key: string,\n  queryString = window.location.search,\n) => {\n  const values = parse(queryString)\n\n  const value = values[key]\n\n  if (value === null) return ''\n  if (!isNaN(Number(value))) Number(value)\n\n  return values[key]\n}\n","import { useEffect, useRef, useState } from 'react'\n\ninterface FitTextParameters {\n  inputValue: string\n  rangeInputValue: number\n  initialFontSize: number\n}\n\nconst MIN_FONT_SIZE = 12\n\nfunction useFitText({\n  inputValue,\n  rangeInputValue,\n  initialFontSize,\n}: FitTextParameters) {\n  const divRef = useRef<HTMLDivElement>(null)\n  const spanRef = useRef<HTMLSpanElement>(null)\n  const [fontSize, setFontSize] = useState(initialFontSize)\n\n  useEffect(() => {\n    const applyFontSize = () => {\n      const spanElWidth = spanRef?.current?.offsetWidth\n      const divElWidth = divRef?.current?.offsetWidth\n      if (!spanElWidth) return\n      if (!divElWidth) return\n\n      const fontSizeNumber = Number(\n        spanRef?.current?.style?.fontSize.split('px')[0],\n      )\n\n      if (spanElWidth >= divElWidth) {\n        const newFontSizeNumber =\n          fontSizeNumber - 1 < MIN_FONT_SIZE\n            ? MIN_FONT_SIZE\n            : fontSizeNumber - 1\n\n        setFontSize(newFontSizeNumber)\n      }\n    }\n\n    applyFontSize()\n  }, [inputValue, rangeInputValue, fontSize])\n\n  useEffect(() => {\n    const applyFontSize = () => {\n      const spanElWidth = spanRef?.current?.offsetWidth\n      const divElWidth = divRef?.current?.offsetWidth\n      const divElHeight = divRef?.current?.offsetHeight\n      if (!divElWidth) return\n      if (!spanElWidth) return\n      if (!divElHeight) return\n\n      const fontSizeNumber = Number(\n        spanRef?.current?.style?.fontSize.split('px')[0],\n      )\n      if (spanElWidth < divElWidth && fontSizeNumber < divElHeight) {\n        const approximateFontSize = Math.floor(\n          fontSizeNumber * (divElWidth / spanElWidth),\n        )\n\n        const newFontSizeNumber =\n          approximateFontSize > divElHeight ? divElHeight : approximateFontSize\n        setFontSize(newFontSizeNumber)\n      }\n    }\n\n    applyFontSize()\n  }, [inputValue, rangeInputValue])\n\n  return { divRef, spanRef, fontSize }\n}\n\nexport default useFitText\n","import React from 'react'\nimport useQueryString from './hooks/useQueryString'\nimport useFitText from './hooks/useFitText'\nimport './App.css'\n\nconst CONTAINER_HEIGHT = 50\nconst INITIAL_CONTAINER_WIDTH = 10\n\nfunction App() {\n  const [inputValue, setInputValue] = useQueryString('text', '')\n  const [rangeInputValue, setRangeInputValue] = useQueryString(\n    'width',\n    INITIAL_CONTAINER_WIDTH,\n  )\n  const { divRef, spanRef, fontSize } = useFitText({\n    inputValue,\n    rangeInputValue,\n    initialFontSize: CONTAINER_HEIGHT,\n  })\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = event.target.value\n    setInputValue(newValue)\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newRangeValue = event.target.valueAsNumber\n    setRangeInputValue(newRangeValue)\n  }\n\n  return (\n    <div className=\"page\">\n      <label className=\"input-label\">\n        Type text here:\n        <input\n          value={inputValue}\n          className=\"input\"\n          type=\"text\"\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className=\"input-label\">\n        Output width:\n        <input\n          value={rangeInputValue}\n          type=\"range\"\n          min={10}\n          max={100}\n          onChange={handleInputChange}\n          className=\"input\"\n        />\n        {rangeInputValue}%\n      </label>\n      <div\n        ref={divRef}\n        className=\"output\"\n        style={{ width: `${rangeInputValue}%` }}\n      >\n        <span ref={spanRef} style={{ fontSize }}>\n          {inputValue}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}